Introduction :

Python is a high-level programming language that's known for its readability and simplicity. It's widely used for various purposes like web development, data analysis, artificial intelligence, and more. Python's syntax is designed to be easy to understand, making it a great choice for beginners and experienced programmers alike.

Basic variable declaration: 

x=10
name=”some_name”





Topic#1 Control flow

Control flow in programming refers to the order in which statements are executed in a program. It allows you to control the flow of execution based on conditions and loops. Here's an explanation with examples in Python:

Conditional Statements:

Conditional statements allow you to execute different blocks of code based on whether a certain condition is true or false.

# Example: Conditional Statement (if-elif-else)
x = 10

if x > 0:
    print("x is positive")
elif x == 0:
    print("x is zero")
else:
    print("x is negative")

#one-linear

x=10

print("x is positive" if x>0 else ("x is zero" if x ==0 else "x is negative"))



Explanation:

If the value of x is greater than 0, it prints "x is positive".
If x is equal to 0, it prints "x is zero".
If neither of the above conditions is true, it prints "x is negative".
Loops:

Loops allow you to execute a block of code repeatedly until a certain condition is met.

For Loop:
Executes a block of code a fixed number of times.

# Example: For Loop
fruits = ["apple", "banana", "cherry"]

for fruit in fruits:
    print(fruit)

# iterate using index

for i in range(0, len(fruits)):
    print(fruits[i])


Explanation:
This loop iterates over each element in the list fruits.
For each iteration, it assigns the current element to the variable fruit.
Inside the loop, it prints each fruit.

While Loop:
Executes a block of code as long as a specified condition is true.

# while condition:
    # opertion
    # increment so that loop further


# Example: While Loop
i = 1

while i <= 5:
    print(i)
    i += 1

Break Statement:
Terminates the loop prematurely.

# Example: Break Statement
fruits = ["apple", "banana", "cherry"]

for fruit in fruits:
    if fruit == "banana":
        break
    print(fruit)

Continue Statement:
Skips the rest of the code inside the loop for the current iteration and continues with the next iteration.

# Example: Continue Statement
for i in range(1, 6):
    if i == 3:
        continue
    print(i)




Topic#2 Data types :



Numbers
Python Dictionary
Booleans
Python Sets
Type Casting
Strings(sequence type)
Python List (sequence type)
Python Tuples (sequence type)
Python Arrays (Most of the time, we don't use it.)




Numbers :

Numbers in Python are data types used to represent numerical values. There are three main types of numbers in Python.

Integer (int):
Integers represent whole numbers without any fractional part.
They can be positive, negative, or zero.

Example:

x = 5
y = -10
z = 0

Floating-point (float):
Floating-point numbers represent numbers with a fractional part.
They are typically used for representing real numbers.
They can also be expressed in scientific notation.

Example:

pi = 3.14
temperature = -0.001
big_number = 2.0e3  # Equivalent to 2000.0

Complex (complex):
Complex numbers consist of a real part and an imaginary part.Both real and imaginary parts are represented as floating-point numbers.The imaginary part is denoted by the letter j or J.
Example:

z1 = 3 + 2j
z2 = -1.5 - 0.5j




Python Dictionary :

A Python dictionary is an ( before it was unordered) ordered collection of key-value pairs. It is a mutable data type, meaning you can modify its content after creation. Each key in a dictionary must be unique and immutable, while values can be of any data type and mutable. Dictionaries are enclosed within curly braces {}, and each key-value pair is separated by a colon :.

Creating a Dictionary:

Example:

my_dict = {'name': 'John', 'age': 30, 'city': 'New York'}

Accessing Values:

Example:

print(my_dict['name'])  # Output: 'John'

Modifying Values:

Example:

my_dict['age'] = 35

Adding New Key-Value Pairs:

Example:

my_dict['gender'] = 'Male'

Removing Key-Value Pairs:

Example:

del my_dict['city']

Dictionary Methods:

Python provides several built-in methods for working with dictionaries, such as keys(), values(), items(), get(), update(), clear(), etc.

Example:

print(my_dict.keys())     # Output: dict_keys(['name', 'age', 'gender'])
print(my_dict.values())   # Output: dict_values(['John', 35, 'Male'])

Dictionary Comprehension:
	
	Example:

	squares = {x: x*x for x in range(1, 6)}

Nested Dictionaries:

Example:

employee = {'name': 'John', 'details': {'age': 30, 'position': 'Manager'}}



Boolean Values:

Booleans in Python represent truth values, which can be either True or False. They are often used in conditional statements and logical operations. 

True: Represents a true or positive condition.
False: Represents a false or negative condition.

x = True
y = False

Usage in Conditional Statements :

Example:

if x:
    print("x is true")
else:
    print("x is false")

Logical Operators:

Booleans are also used with logical operators (and, or, not) to perform logical operations.

Example:


a = True
b = False

# Logical AND
result_and = a and b  # Result: False

# Logical OR
result_or = a or b  # Result: True

# Logical NOT
result_not = not a  # Result: False

Comparison Operators:

Comparison operators (==, !=, <, >, <=, >=) return boolean values based on the comparison of two operands.

Example:

x = 5
y = 10

# Equal to
print(x == y)  # Result: False

# Not equal to
print(x != y)  # Result: True

# Less than
print(x < y)  # Result: True

# Greater than or equal to
print(x >= y)  # Result: False



Python Set:

A set is an unordered collection of unique elements. Sets are mutable, meaning you can modify their content after creation, but they do not allow duplicate elements. Sets are useful for performing mathematical set operations like union, intersection, difference, and symmetric difference.

Here's an explanation of Python sets with examples:

Creating a Set:

You can create a set by enclosing elements within curly braces {}.
Example:

my_set = {1, 2, 3, 4, 5}

Creating an Empty Set:

You can create an empty set using the set() constructor or using empty curly braces {}. Note that using {} will create an empty dictionary, so to create an empty set, you should use set().
Example:

empty_set = set()
Adding Elements to a Set:

You can add elements to a set using the add() method.
Example:

my_set.add(6)

Removing Elements from a Set:

You can remove elements from a set using the remove() method. If the element does not exist, it will raise a KeyError.
Example:

my_set.remove(3)
Set Operations:

Python sets support various set operations like union (|), intersection (&), difference (-), and symmetric difference (^).

Example:

set1 = {1, 2, 3, 4}
set2 = {3, 4, 5, 6}

union_set = set1 | set2             # Union
intersection_set = set1 & set2      # Intersection
difference_set = set1 - set2        # Difference
symmetric_difference_set = set1 ^ set2  # Symmetric Difference
Set Methods:
Python sets have several built-in methods for performing set operations and manipulation, such as union(), intersection(), difference(), symmetric_difference(), add(), remove(), discard(), pop(), clear(), etc.

Example:

my_set = {1, 2, 3}
my_set.discard(2)   # Removes 2 from the set if it exists, otherwise does nothing



Type Casting:

Type casting, also known as type conversion, is the process of converting the data type of an object into another data type. Python provides built-in functions for performing type casting between different data types. Here's an explanation of type casting with examples:

Integer to Float Conversion:
You can convert an integer to a float using the float() function.

Example:

integer_number = 10
float_number = float(integer_number)
print(float_number)  # Output: 10.0

Float to Integer Conversion:
You can convert a float to an integer using the int() function. This truncates the decimal part.

Example:

float_number = 10.5
integer_number = int(float_number)
print(integer_number)  # Output: 10

String to Integer/Float Conversion:
You can convert a string representing an integer or float to an actual integer or float using the int() and float() functions, respectively.

Example:

str_integer = "123"
int_number = int(str_integer)
print(int_number)  # Output: 123

str_float = "3.14"
float_number = float(str_float)
print(float_number)  # Output: 3.14

Integer/Float to String Conversion:
You can convert an integer or float to a string using the str() function.

Example:

integer_number = 123
str_integer = str(integer_number)
print(str_integer)  # Output: "123"

float_number = 3.14
str_float = str(float_number)
print(str_float)  # Output: "3.14"

String to List Conversion:
You can convert a string to a list of characters using the list() function.

Example:

my_string = "hello"
char_list = list(my_string)
print(char_list)  # Output: ['h', 'e', 'l', 'l', 'o']

List to String Conversion:
You can convert a list of characters to a string using the join() method.

Example:

char_list = ['h', 'e', 'l', 'l', 'o']
my_string = ''.join(char_list)
print(my_string)  # Output: "hello"



String:

Anything wrapped inside the “ ” or ‘’ is called a string following are the points that string follows:

Immutable:
Example:

my_string = 'Hello'
# This will raise an error
my_string[0] = 'h'

Indexing and Slicing:
	Example:

my_string = 'Python'
print(my_string[0])  # Output: 'P'
print(my_string[2:5])  # Output: 'tho'

Concatenation:
Example:

first_name = 'John'
last_name = 'Doe'
full_name = first_name + ' ' + last_name
print(full_name)  # Output: 'John Doe'

String Methods:
Example:

my_string = '  Hello, world!  '
print(my_string.strip())  # Output: 'Hello, world!'
print(my_string.upper())  # Output: '  HELLO, WORLD!  '

Formatted Strings:
	Example:

name = 'Alice'
age = 30
print(f'My name is {name} and I am {age} years old.')  # Output: 'My name is Alice and I am 30 years old.'

Escape Characters:
Example:

my_string = 'This is a\nmultiline\nstring.'
print(my_string)

String Operations:

Example:

my_string = 'Python'
print(len(my_string))  # Output: 6
print('Py' in my_string)  # Output: True




Python List:

A Python list is a collection of items stored in a sequential order. Lists are mutable, meaning you can modify their content after creation. Each item in a list can be of any data type, and items can be added, removed, or modified as needed. Lists are enclosed within square brackets [], and items are separated by commas.

Creating a List:
You can create a list by enclosing items within square brackets [].

	Example:

my_list = [1, 2, 3, 4, 5]

Accessing Elements:
You can access elements of a list using indexing. Indexing starts from 0 for the first element.

Example:
print(my_list[0])  # Output: 1

Slicing:
You can extract a sublist (slice) from a list using slicing notation [start:stop:step].

Example:

print(my_list[1:4])  # Output: [2, 3, 4]

Modifying Elements:
You can modify the value of an element in a list by assigning a new value to it.

Example:

my_list[2] = 10

Adding Elements:
You can add elements to the end of a list using the append() method or concatenate lists using the + operator.

Example:

my_list.append(6)

Removing Elements:
You can remove elements from a list using the remove() method, del keyword, or pop() method.

Example:

my_list.remove(3)

List Methods:
Python provides several built-in methods for working with lists, such as append(), extend(), insert(), pop(), remove(), sort(), reverse(), etc.

Example:

my_list.sort()

List Comprehension:
List comprehension allows you to create lists in a concise and efficient manner based on an existing iterable.

Example:

squares = [x**2 for x in range(1, 6)]

Nested Lists:
Lists can contain other lists as elements, allowing you to create nested data structures.

Example:

# Creating a nested list using list comprehension
matrix = [[i + j for j in range(3)] for i in range(3)]

# Displaying the nested list
print(matrix)

Output:

[[0, 1, 2], [1, 2, 3], [2, 3, 4]]


##Important 

lambda

A lambda function in Python is a small anonymous function that can have any number of arguments but can only have one expression. They are also known as lambda expressions or lambda forms. Lambda functions are typically used when you need a simple function for a short period of time, often as an argument to higher-order functions like map(), filter(), or sorted().

Here's the syntax of a lambda function:


lambda arguments: expression

Now, let's explain lambda functions with an example:

Suppose you have a simple function to double a number:


def double(x):
    return x * 2

You can rewrite this function as a lambda function like this:

double = lambda x: x * 2

Will come on this topic after learning about map, reduce, filter


map() Function:

The map() function applies a given function to each item of an iterable (like a list) and returns a new iterable with the results.

Syntax: map(function, iterable)

Example:

# Define a function to double a number

def double(x):
    return x * 2

# Apply the double function to each element of the list using map

numbers = [1, 2, 3, 4, 5]
doubled_numbers = map(double, numbers)
print(list(doubled_numbers))  # Output: [2, 4, 6, 8, 10]



filter() Function:

The filter() function constructs a new iterable from elements of the original iterable for which the given function returns True.

Syntax: filter(function, iterable)
Example:

# Define a function to filter even numbers
def is_even(x):
    return x % 2 == 0

# Filter even numbers from the list using filter
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even_numbers = filter(is_even, numbers)
print(list(even_numbers))  # Output: [2, 4, 6, 8, 10]

reduce() Function:

The reduce() function applies a rolling computation to sequential pairs of values in an iterable, ultimately reducing them to a single value.
Before Python 3, reduce() was a built-in function, but in Python 3 it's part of the functools module.

Syntax: functools.reduce(function, iterable[, initializer])
Example (with functools.reduce()):

from functools import reduce

# Define a function to sum numbers
def add(x, y):
    return x + y

# Reduce the list to find the sum of all elements
numbers = [1, 2, 3, 4, 5]
sum_of_numbers = reduce(add, numbers)
print(sum_of_numbers)  # Output: 15


Now usage of lambda with map and filter:


With map() function:

numbers = [1, 2, 3, 4, 5]
doubled_numbers = map(lambda x: x * 2, numbers)
print(list(doubled_numbers))  # Output: [2, 4, 6, 8, 10]

With filter() function:

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even_numbers = filter(lambda x: x % 2 == 0, numbers)
print(list(even_numbers))  # Output: [2, 4, 6, 8, 10]



Python Tuples:

A tuple in Python is an ordered collection of elements enclosed within parentheses (). Tuples are similar to lists, but they are immutable, meaning their elements cannot be changed after creation. Tuples can contain elements of different data types and support indexing and slicing operations.

Here's an explanation of Python tuples with examples:

Creating a Tuple:
You can create a tuple by enclosing elements within parentheses ().
Example:

my_tuple = (1, 2, 3, 4, 5)

Accessing Elements:
You can access elements of a tuple using indexing. Indexing starts from 0 for the first element.
Example:

print(my_tuple[0])  # Output: 1
Slicing:
You can extract a sub-tuple (slice) from a tuple using slicing notation [start:stop:step].
Example:
print(my_tuple[1:4])  # Output: (2, 3, 4)
Immutable Nature:
Tuples are immutable, meaning you cannot modify their elements after creation.
Example:

my_tuple[0] = 10  # This will raise an error

Tuple Packing and Unpacking:
You can create a tuple without parentheses by simply separating the elements with commas. This is called tuple packing.
You can also unpack a tuple into individual variables.
Example:

my_packed_tuple = 1, 2, 3
a, b, c = my_packed_tuple
print(a, b, c)  # Output: 1 2 3

Empty Tuple:
You can create an empty tuple by using empty parentheses ().
Example:

empty_tuple = ()

Single-element Tuple:
To create a single-element tuple, you need to include a comma after the element.
Example:

single_element_tuple = (1,)
Tuple Methods:
Tuples have limited methods compared to lists due to their immutable nature. Some common methods include count() and index().
Example:

my_tuple = (1, 2, 2, 3, 4, 4, 4)
print(my_tuple.count(2))  # Output: 2


Topic#3 Function

Functions in programming are blocks of reusable code that perform a specific task. They allow you to break down your program into smaller, manageable parts, making your code more organized, readable, and easier to maintain. Here's an explanation of functions with examples in Python:

Example:

# Example: Defining a Function
def greet():
    print("Hello, World!")

# Calling the function
greet()

Function Parameters:

# Example: Function with Parameters
def greet(name):
    print("Hello,", name)

# Calling the function with an argument
greet("Alice")

Return Statement:

# Example: Function with Return Statement
def add(x, y):
    return x + y

# Calling the function and storing the result
result = add(3, 5)
print("Result:", result)

Default Parameters:

# Example: Function with Default Parameters
def greet(name="World"):
    print("Hello,", name)

# Calling the function with and without an argument
greet()  # Output: Hello, World
greet("Alice")  # Output: Hello, Alice



Topic#4 File Handling:

File handling in programming refers to the process of working with files on a computer's filesystem. This typically involves operations such as reading from files, writing to files, and manipulating file contents. Here's an explanation of file handling with examples in Python:

Opening and Closing Files:
Before performing any operations on a file, you need to open it using the open() function. After you're done with the file, you should close it to free up system resources.

# Example: Opening and Closing Files
file = open("example.txt", "r")  # Open file for reading
# Perform operations on the file
file.close()  # Close the file when done

Reading from Files:
You can read data from a file using various methods like read(), readline(), or readlines().

# Example: Reading from Files
with open("example.txt", "r") as file:
    content = file.read()
    print(content)

Writing to Files:
You can write data to a file using the write() method.

# Example: Writing to Files
with open("example.txt", "w") as file:
    file.write("Hello, World!\n")
    file.write("This is a test file.")
Appending to Files:
If you want to add content to the end of an existing file without overwriting its contents, you can open it in append mode ("a").

# Example: Appending to Files
with open("example.txt", "a") as file:
    file.write("\nThis text is appended to the file.")

Iterating Over Lines in a File:

You can iterate over the lines in a file using a for loop.

# Example: Iterating Over Lines in a File
with open("example.txt", "r") as file:
    for line in file:
        print(line.strip())  # Strip newline characters from each line


Topic#5 Exception Handling:

Exception handling is the process of dealing with errors that occur during the execution of a program. Python provides a mechanism to handle exceptions using try, except, finally, and else blocks. Here's an explanation of exception handling with examples in Python:

Basic Exception Handling:

You can use a try block to wrap the code that might raise an exception, and an except block to handle specific types of exceptions.

# Example: Basic Exception Handling
try:
    result = 10 / 0  # This will raise a ZeroDivisionError
except ZeroDivisionError:
    print("Error: Cannot divide by zero")

Handling Multiple Exceptions:
	You can handle multiple types of exceptions using multiple except blocks or a single except block with multiple exception types.
	
# Example: Handling Multiple Exceptions
try:
    result = int("hello")  # This will raise a ValueError
except ValueError:
    print("Error: Invalid conversion to integer")
except ZeroDivisionError:
    print("Error: Cannot divide by zero")

Handling Any Exception:
	
# Example: Handling Any Exception
try:
    result = 10 / 0
except:
    print("An error occurred")

The else Block:
	You can use the else block to execute code that should run only if no exceptions occur in the try block.

	
	# Example: else Block
try:
    result = 10 / 2
except ZeroDivisionError:
    print("Error: Cannot divide by zero")
else:
    print("Result:", result)

The finally Block:

The finally block is always executed, whether an exception occurs or not. It's typically used for cleanup operations such as closing files or releasing resources.

# Example: finally Block
try:
    file = open("example.txt", "r")
    # Perform file operations
except FileNotFoundError:
    print("Error: File not found")
finally:
    file.close()  # Close the file regardless of whether an exception occurred


Topic#6 Class


Class is a blueprint for creating objects. It defines the attributes (data) and methods (functions) that the objects of the class will have. Here's an explanation of classes in Python:

Defining a Class:
You define a class using the class keyword, followed by the class name and a colon. Inside the class body, you define attributes and methods.

# Example: Defining a Class

class MyClass:
    # Class attribute
    class_variable = "Hello, World!"

    # Constructor method (initialization)
    def __init__(self, name):
        self.name = name  # Instance attribute

    # Instance method
    def greet(self):
        print("Hello,", self.name)


	
Calling class :

# Example: Creating Objects (Instances)

obj1 = MyClass("Alice")
obj2 = MyClass("Bob")

Accessing Attributes and Calling Methods:

# Example: Accessing Attributes and Calling Methods

print(obj1.name)  # Accessing instance attribute
obj1.greet()      # Calling instance method

print(obj2.class_variable)  # Accessing class attribute
obj2.greet()                # Calling instance method


Topic#7 OOPS:


class Person:
    def __init__(self, name, age, occupation):
        self.name = name
        self.age = age
        self.occupation = occupation

    def describe(self):
        print(f"Name: {self.name}")
        print(f"Age: {self.age}")
        print(f"Occupation: {self.occupation}")

    def update_age(self, new_age):
        if new_age >= 0:
            self.age = new_age
        else:
            print("Age cannot be negative.")

    def is_eligible_to_vote(self):
        return self.age >= 18


class Student(Person):
    def __init__(self, name, age, occupation, student_id):
        super().__init__(name, age, occupation)
        self.student_id = student_id

    def describe(self):  # Method overriding
        super().describe()
        print(f"Student ID: {self.student_id}")


# Create instances of the Person and Student classes
person1 = Person("Alice", 25, "Engineer")
student1 = Student("Bob", 20, "Student", "S12345")

# Describe the persons and student
print("Person 1:")
person1.describe()
print("\nStudent 1:")
student1.describe()

# Check if objects are instances of their respective classes
print("\nIs person1 an instance of Person?", isinstance(person1, Person))
print("Is student1 an instance of Student?", isinstance(student1, Student))

# Check if objects are instances of the superclass
print("\nIs student1 an instance of Person?", isinstance(student1, Person))

# Check polymorphism - both objects have describe method
print("\nCalling describe method on person1:")
person1.describe()
print("\nCalling describe method on student1:")
student1.describe()

Class

A class is a blueprint for creating objects with predefined attributes and methods. In the example, both Person and Student are classes.

Object:
An object is an instance of a class. It represents a specific instance of the class, with its own set of data and behavior. In the example, person1 and student1 are objects of the Person and Student classes, respectively.
Inheritance:
Inheritance is the mechanism by which a new class (subclass) inherits attributes and methods from an existing class (superclass). In the example, the Student class inherits from the Person class, acquiring its attributes and methods.
Encapsulation:
Encapsulation refers to bundling data (attributes) and methods that operate on the data within a single unit (class). It allows for the hiding of internal state and requires interaction with objects through well-defined interfaces. In the example, both Person and Student classes encapsulate attributes (name, age, occupation, student_id) and methods (describe, update_age, is_eligible_to_vote).
Polymorphism:
Polymorphism allows objects of different classes to be treated as objects of a common superclass. It enables the use of a single interface for different types of objects. In the example, both person1 and student1 objects can be treated as objects of the Person class, as they share a common interface (describe method).
Abstraction:
Abstraction involves simplifying complex systems by hiding unnecessary details while emphasizing essential features. It allows you to focus on what an object does rather than how it does it. In the example, the Person and Student classes provide a high-level abstraction of individuals and students, respectively, hiding internal implementation details.
